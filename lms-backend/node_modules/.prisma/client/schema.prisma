generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  certificates Certificate[]
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  role         String        @default("student")
  createdAt    DateTime      @default(now())
  enrollments  Enrollment[]
  progress     Progress[]
}

model Course {
  certificates Certificate[]
  categories   Category[]    @relation("CourseCategories")
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lessons      Lesson[]
  enrollments  Enrollment[]
}

model Lesson {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  order     Int
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  quizzes   Quiz[]
  progress  Progress[]
}

model Quiz {
  id          Int      @id @default(autoincrement())
  question    String
  options     String[]
  answer      String
  explanation String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Progress {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int
  isCompleted Boolean  @default(false)
  watchedAt   Float    @default(0)
  updatedAt   DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Certificate {
  id       Int      @id @default(autoincrement())
  code     String   @unique
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  course   Course   @relation(fields: [courseId], references: [id])
  courseId Int
  issuedAt DateTime @default(now())
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[] @relation("CourseCategories")
}
